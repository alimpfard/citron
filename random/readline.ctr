import
  Library/Data/Map
  Library/Foreign/C/PackedArray.
CTypes.

var rl is CTypes loadLibrary: 'libreadline.so'.
var int is CTypes sint.
var pointer is CTypes pointer.
var cif is CIF new .
var readline is rl readline.
var rlcomp is rl rl_attempted_completion_function.
var rl_completion_matches is rl rl_completion_matches.
var cmmcif is CIF new setABI: 0 return: pointer argTypes: [pointer, pointer].
var rl_attemped_completion_over is rl rl_attemped_completion_over.
var strdup_s is CTypes loadLibrary: Nil, strdup.
var strdup_c is CIF new setABI: 0 return: pointer argTypes: [pointer].
var strdup is \:s strdup_c call: strdup_s withArgs: [s].

Pen writeln: 'rlcomp = ' + rlcomp.
var ptrArray is PackedArray new initWithType: 'pointer' count: 2.
var NULL is CTypes pointer.
var testptr is CTypes fromString: 'test'.
var one is CTypes sint8 set: 1.
var names is Map fromArray: [[x, (CTypes fromString: x)],, [
  'Andre Blah',
  'Test'
]].
var idx is 0.
var generator_fn is CTypes closureOf: {:ch:state :rv
    rv is Nil.
    ch is CTypes string set: ch, get.
    const names each: {:k:v
      k startsWith: ch, ifTrue: {
        rv is v.
        True break.
      }.
    }.
    ^rv isNil either: const NULL or: {
      ^(state = 0) either: {
        ^strdup[rv].
      } or: const NULL.
    }.
} withCIF: (CIF new setABI: 0 return: pointer argTypes: [pointer, int]).
var rlfunc is (CTypes closureOf: {:txt:s:e
  rl_attemped_completion_over getAddress derefSet: one.
  ^const cmmcif call: rl_completion_matches withArgs: [txt, const generator_fn].
} withCIF: (CIF new setABI: 0 return: pointer argTypes: [pointer, int, int])).
Pen writeln: 'rlfunc = ' + rlfunc.
rlcomp derefSet: rlfunc getAddress.
var rlbk is rl rl_bind_key.
var glfns is Reflect getMethodsOf: Reflect.
var glfnsi is -1.
var keyhandler is CTypes closureOf: {:count:key
  (glfns count = glfnsi) ifTrue: {glfnsi is -1.}.
  Pen writeln: (glfns at: (glfnsi +=: 1)).
  ^key.
} withCIF: (CIF new setABI: 0 return: int argTypes: [int, int]).
cif setABI: 0 return: int argTypes: [int, pointer].
Pen write: '> ' + (cif call: rlbk withArgs: [('_' toByteArray at: 0), keyhandler]), brk.
readline is {:prompt
  Pen writeln: prompt.
  var ptr is const cif setABI: 0 return: const pointer argTypes: [const pointer],
    call: const readline withArgs: [prompt].
  Pen writeln: ptr.
}.
Pen writeln: 'You said %s' % [(readline applyTo: 'say shit: ')].
